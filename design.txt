# Q1.
The problem is that the counter variable is a shared structure, and currently
several threads may access it at the same time, causing discrepancies between
the actual count and the perceived count of the thread. 

To fix this we use a lock which forms a critical section for the entire body of
the while loop in the adder function. This ensures that no concurrent
modification to the counter variable and other statistics variables can occur.

# Q2
The problem here is that the locks are shared, and function bill acquires locks
in the order a, b whereas the function ben acquires locks in the order b, a.
This can lead to a deadlock where the bill thread can acquire lock a, and is
then forced to sleep by the OS.  The other thread can then run ben to acquire
lock b, at which point neither thread can progress as neither can obtain the
other missing lock. Since they can't progress they also can't release the lock
they have already acquired, causing deadlock.

The code forming the critical section is the two dummy lines between the locks
for both bill and ben.

To solve this problem, we simply change both the order of lock acquisition and
lock release in the ben function to match the order in the bill function. So
the ben function now acquires in the order a, b and releases in the order b, a.

Now both functions require lock 'a' first to progress.  This ensures that even
if either function acquires only lock a, then any another thread still cannot
acquire any locks at all until the first function has acquired and released
both locks. This prevents the deadlock scenario.

# Q3
The problem is the producer/consumer problem - one or more producer threads put
data into a circular buffer of fixed size, while one or more consumer threads
consumes information from the same buffer.

Three synchronisation structures are used - one lock, and two condition
variables. A circular buffer is also used to store produced items, and counters
are kept for tracking the number of items in the buffer and the head of the
item list within the buffer. These structures are all shared between threads.

The lock is used for mutual exclusion within both the consumer_receive and
producer_send functions. The code between the acquisition and release of this
lock defines the critical sections, which are protected from concurrent
modification. This prevents race conditions and incorrect behaviour involving
the buffer and its associated counters.

The consumer_receive function checks the amount of items in the buffer. If
there are no items to consume, it blocks on the pc_empty condition variable and
releases the lock until there is. Once there is an item (signalled by the
broadcast call in the producer_send function), and the lock is free to acquire,
it can then wake and consume the item, removing it from the buffer and also
broadcasting to any threads waiting on the pc_full condition variable that
there is space to produce another item.

The producer_send function checks if there is space in the buffer to place an
item. If there is no space, it blocks on  the pc_full condition variable and
releases the lock until there is. Once there is space (signalled by the
broadcast call in the consumer_receive function), and the lock is free to
acquire, it can then wake and produce an item to store in the buffer.  It then
broadcasts to any threads waiting on the pc_empty condition variable that there
is an item to consume.

We use condition variables here in addition to the lock because they enable
sleeping/waking functionality. Threads can sleep while they either wait for an
item to consume, or wait for space to place an item. Instead of waiting idle
the OS can then switch to a different non-waiting thread to minimize downtime
and therefore the program will execute faster overall.

# Q4
The bar synchronisation problem is a variation of the producer-consumer problem.
The customers (producers) order drinks, while the bartenders (consumers) process
these orders.

A fixed buffer of size NCUSTOMERS is used to store the orders. The buffer is 
implemented as a circular queue. Since this is a shared structure, we use a lock 
and conditional variables to manage access to the buffer. 

Each order gets an ID and a boolean stating if the order has been fulfilled 
attached to it. A conditional variable is used to make the customer wait until 
there is free space in the buffer. When there is free space, an order is added to 
the tail of the buffer and this forms a critical section. The customer thread will 
then signal to any waiting bartender threads that there is an order waiting to 
be taken.

The customer gets blocked after making their order through a conditional variable 
which checks if the order has been fulfilled. NCUSTOMERS conditional variables are 
made to block each indiviudal customers order. The bartender will signal that this
has been done when serve_order() is called. The process of checking if the order 
has been fulfilled and modifying the variable forms a critical section.

A conditional variable is used to make the bartender wait until an order is added 
to the buffer. When an order becomes available, the first order made is removed 
from the buffer and this forms a critical section. The bartender thread then 
signals to any waiting customer threads that there is free space in the buffer.

To mix in parallel, we lock every bottle that is included in the order. To prevent 
deadlocks in the case of multiple of the same bottle being ordered, an array of 
booleans is made to keep track of which bottles have been locked. The mixing of 
the drinks forms the critical section. The locks are then released in reverse.
